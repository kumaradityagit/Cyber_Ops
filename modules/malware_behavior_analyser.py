import psutil
import time
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
import os
from threading import Timer

# Path to save the PDF report
SAVE_PATH = r"C:\Users\harsh\Documents\Reports generated"

suspicious_behavior = []

# Monitor system processes using psutil
def monitor_processes():
    print("Monitoring system processes...")
    for proc in psutil.process_iter(['pid', 'name', 'status']):
        try:
            if proc.info['status'] in [psutil.STATUS_ZOMBIE, psutil.STATUS_DEAD]:
                suspicious_behavior.append(f"Suspicious Process: {proc.info['name']} (PID: {proc.info['pid']})")
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue

# File system event handler
class FileEventHandler(FileSystemEventHandler):
    def on_modified(self, event):
        if not event.is_directory:
            suspicious_behavior.append(f"File modified: {event.src_path}")

    def on_created(self, event):
        if not event.is_directory:
            suspicious_behavior.append(f"File created: {event.src_path}")

    def on_deleted(self, event):
        if not event.is_directory:
            suspicious_behavior.append(f"File deleted: {event.src_path}")

# PDF generation function
def generate_pdf_report():
    filename = os.path.join(SAVE_PATH, "Malware_Behavior_Report.pdf")
    c = canvas.Canvas(filename, pagesize=letter)
    c.setFont("Helvetica", 12)
    c.drawString(100, 750, "Malware Behavior Analysis Report")
    y_position = 730
    for behavior in suspicious_behavior:
        c.drawString(100, y_position, behavior)
        y_position -= 20
        if y_position < 50:
            c.showPage()
            c.setFont("Helvetica", 12)
            y_position = 750
    c.save()
    print(f"[+] PDF report generated and saved at: {filename}")

# Run file system monitor with cooldown
def start_file_system_watcher(duration=10):
    print(f"Monitoring file system for {duration} seconds...")
    event_handler = FileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, path="C:\\", recursive=True)
    observer.start()

    # Stop observer after cooldown and generate report
    def stop_and_report():
        observer.stop()
        observer.join()
        generate_pdf_report()

    Timer(duration, stop_and_report).start()

# Main execution
def analyze_malware_behavior():
    monitor_processes()
    start_file_system_watcher(duration=10)

analyze_malware_behavior()
